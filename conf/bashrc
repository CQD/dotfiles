# If not running interactively, don't do anything
[ -z "$PS1" ] && return

###############################
# Basics
###############################

export EDITOR=vim
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad
export TERM=xterm-256color

[ -n "$TMUX" ] && export TERM=screen-256color # tmux matches screen instead of xterm
                                              # https://superuser.com/questions/424086
PATH=$PATH:~/bin

###############################
# Prompt styling
###############################

# print git branch status
function git_branch {
    # do nothing if
    # - no git
    # - not git repo
    # - not in work tree
    if ! type git &> /dev/null \
       || [ "false" == "$(git rev-parse --is-inside-work-tree 2>/dev/null || echo false)" ] &> /dev/null \
    ; then
        return
    fi

    # modified files
    if [ -z "$NO_GIT_STATUS" ] ; then
        st=$(git status -s)

        # staged
        flags_s=$(echo "$st" | cut -b 1-1 | tr -d "\n" | tr -d "?" )
        flags_s=${flags_s/ /}

        # not staged
        flags_ns=$(echo "$st" | cut -b 2-2 | tr -d "\n" )
        flags_ns=${flags_ns/ /}
    fi

    # ref name, or commit hash
    head_type='b' # branch
    ref=$(git symbolic-ref --short HEAD 2> /dev/null);

    if [ "" == "$ref" ] ; then
        head_type='h' # hash
        ref=$(git log --pretty=format:'%h' -n 1 2> /dev/null);
    fi

    # print result
    echo "$head_type $ref _$flags_s _$flags_ns";
}

# random choose host color according to input string
function rand_color {
    local r g b fgcode offset
    if [ -z "$2" ]; then
        offset=5
    else
        offset=$2
    fi

    r=-1; g=-1; b=-1

    RANDOM=$(num-from-string $1); #seed with input string
    until [ $(( $r + $g + $b )) -ge $offset ]; do
        r=$(($RANDOM % 6));
        g=$(($RANDOM % 6));
        b=$(($RANDOM % 6));
    done

    fgcode=$((16 + 36 * $r + 6 * $g + $b))
    echo $fgcode
}

function num-from-string {
    local out i a

    out=1
    for ((i=0;i<${#1};++i)); do
        printf -v a "%d\n" "'${1:i:1}"
        out+=$((a%10))
    done
    echo $(($out % 1000000))
}

function ps_path {
    echo '\[\e[48;5;75m\]\[\e[30m\] \w '
}
function ps_login {
    _HOSTNAME=${PS_HOSTNAME:-$HOSTNAME}
    _HOSTNAME=${_HOSTNAME/.lan/}
    _HOSTNAME=${_HOSTNAME/.compute.internal/.aws}
    echo '\[\e[48;5;235m\] $(ps_status)\[\e[38;5;'$(rand_color $USER)'m\]\u\[\e[37m\]@\[\e[38;5;'$(rand_color $_PS_HOSTNAME)'m\]${PS_HOSTNAME:-'$_HOSTNAME'} '
}
function ps_status {
    ret=$?

    local symbols job_cnt gears
    symbols=''

    # last command failed
    if [ $ret -ne 0 ] ; then
        symbols+='\033[38;5;160m✘ \033[22m'
    fi

    # background job running
    job_cnt=$(jobs -l | wc -l)
    if [ $job_cnt -gt 0 ] ; then
        gears=$(yes '⌛' |head -n $job_cnt)
        symbols+='\033[38;5;208m'$gears' \033[22m'
    fi

    # output
    echo -e $symbols
}
function ps_git {
    local branch prefix color

    git_info=$(git_branch)
    if [ "$git_info" == "" ] ; then
        return
    fi

    git_info=( $git_info )
    prefix=${git_info[0]}
    branch=${git_info[1]}
    flag_staged=${git_info[2]/_/}
    flag_not_staged=${git_info[3]/_/}

    if [ "$prefix" == "b" ] ; then
        if [ "$branch" == "master" ] ; then
            color=106
        elif [ "$branch" == "develop" ] ; then
            color=114
        else
            color=$(rand_color $branch 6)
        fi
        echo -ne '\033[0;30;48;5;'$color'm ⎇ '$branch' '
    else
        echo -ne '\033[0;30;48;5;136m ➦ '$branch' '
    fi

    echo -ne '\033[m'

    if [ ! "" == "$flag_staged" ] ; then
      echo -ne '\033[0;43;30m' $flag_staged' '
    fi
    if [ ! "" == "$flag_not_staged" ] ; then
      echo -ne '\033[1;41;37m' $flag_not_staged' '
    fi

    echo -e '\033[m'
}
function ps_time {
    date '+[%H:%M:%S]'
}

PS1=$(ps_login)$(ps_path)'$(ps_git)\[\e[0m\]\n\[\e[32m\]$(ps_time) \[\e[33m\]$\[\e[0m\] '

###############################
# Run scripts
###############################

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# include machine depending settings that not to be included in dotfile repo
if [ -f ~/.bashrc_local ] ; then
    source ~/.bashrc_local
fi

# ssh-agent manangement
if [ "" == "$SSH_AUTH_SOCK" ]; then
    if ! type -p ssh-agent; then
        echo "Can not init ssh-agent, command not available!"
    else
        echo "Initing ssh-agent"
        eval $(ssh-agent)
    fi
fi

###############################
# alias
###############################

#sets up proper alias commands when called
if [ "$(uname)" = "Linux" ]; then
    # set up color for linux
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias ls='ls --color=auto -vG'
elif [ "$(uname)" = "Darwin" ]; then
    alias ls='ls -vG'
else
    alias ls='ls -G'
fi

alias ll='ls -l'
alias la='ls -a'
alias lla='ls -al'

# tmux alias
alias ta='tmux attach'

# Docker alias
dp() {
    cmd=$(docker compose 2> /dev/null > /dev/null && echo "docker compose" || echo "docker-compose")
    nice -n 10 $cmd $@
}

dps() {
    dp exec "$1" /bin/bash || dp exec "$1" /bin/sh
}

dpe() {
    dp exec $@
}

# python alias

_resolve_python() {
    if type python3 &> /dev/null ; then
        echo python3
    else
        echo python
    fi
}

venv() {
    py=$(_resolve_python)
    $py -m venv $@
}

av() {
    base=${1:-venv}
    if [ ! -f $base/bin/activate ]; then
        py=$(_resolve_python)
        echo "把 virtual env 建立到 $base"
        type $py
        echo "python 版本: "$($py --version)
        venv $base
    fi
    . $base/bin/activate
}

dv() {
    if [ "" == "$VIRTUAL_ENV" ] ; then
        echo "沒有啟動中的 virtual env"
        return
    fi
    deactivate
}

# Hack for tmux agent forwarding
fixssh() {
    eval $(tmux show-env -s |grep '^SSH_')
    echo SSH_* envs re-evaluated.
}
if  [ "$TMUX" ]; then
    fixssh
fi

# misc
man () {
    case "$(type -t -- "$1")" in
    builtin|keyword)
        help "$1"
        ;;
    *)
        command man "$@"
        ;;
    esac
}

cdp() {
    TTT=$(pwd)
    while ! [ -d .git ]; do
        cd ..
    done
    if ! [ "" == "$1" ]; then
        cd $1
    fi
    OLDPWD=$TTT
}
