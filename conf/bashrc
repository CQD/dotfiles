# If not running interactively, don't do anything
[ -z "$PS1" ] && return

###############################
# Basics
###############################

export EDITOR=vim
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad
export TERM=xterm-256color

export VIRTUAL_ENV_DISABLE_PROMPT=1  # 停用 virtualenv 的 prompt 改寫，後面會用 $VIRTUAL_ENV 來判斷

[ -n "$TMUX" ] && export TERM=screen-256color # tmux matches screen instead of xterm
                                              # https://superuser.com/questions/424086
PATH=$PATH:~/bin

PS_TRIANGLE=$'\uE0B0'

# https://www.gnu.org/software/bash/manual/html_node/Exit-Status.html
# "When a command terminates on a fatal signal whose number is N,
#  Bash uses the value 128+N as the exit status. "
# 可以這樣反推出原本的 signal number
declare -a EXIT_CODES_DESC
EXIT_CODES_DESC[129]="SIGHUP"  # 128 + 1
EXIT_CODES_DESC[130]="SIGINT"  # 128 + 2 以下類推
EXIT_CODES_DESC[131]="SIGQUIT"
EXIT_CODES_DESC[132]="SIGILL"
EXIT_CODES_DESC[134]="SIGABRT"
EXIT_CODES_DESC[136]="SIGFPE"
EXIT_CODES_DESC[137]="SIGKILL"
EXIT_CODES_DESC[139]="SIGSEGV"
EXIT_CODES_DESC[141]="SIGPIPE"

###############################
# Prompt styling
###############################

# print git branch status
function git_branch {
    # modified files
    st=$(git status -s 2> /dev/null )
    if [ ! $? == "0" ] ; then
        return
    fi

    modified=0
    staged=0
    untracked=0
    conflict=0

    if [ ! "" == "$st" ] ; then
        while IFS= read -r line; do
            staged_flag="${line:0:1}"
            not_staged_flag="${line:1:1}"

            if [ "$staged_flag" == "U" ] || [ "$not_staged_flag" == "U" ]; then
                conflict=$((conflict + 1))
                continue
            fi

            if [ "$staged_flag" == "?" ] || [ "$not_staged_flag" == "?" ]; then
                untracked=$((untracked + 1))
                continue
            fi

            if [[ "$staged_flag" != " " ]]; then
                staged=$((staged + 1))
                continue
            fi

            if [[ "$not_staged_flag" != " " ]]; then
                modified=$((modified + 1))
                continue
            fi
        done <<< "$st"
    fi

    # ref name, or commit hash
    head_type='b' # branch
    ref=$(git symbolic-ref --short HEAD 2> /dev/null);

    if [ "" == "$ref" ] ; then
        head_type='h' # hash
        ref=$( git rev-parse --short HEAD 2> /dev/null );
    fi

    # print result
    echo "$head_type $ref $modified $staged $untracked $conflict";
}

# random choose color according to input string
# ref: https://stackoverflow.com/a/27165165
function rand_color {
    min=$1
    scale=$2
    text=$3

    r=-1; g=-1; b=-1

    RANDOM=$(num-from-string $text); #seed with input string
    r=$(( ( $RANDOM % $scale ) + $min));
    g=$(( ( $RANDOM % $scale ) + $min));
    b=$(( ( $RANDOM % $scale ) + $min));

    color_code=$(( 16 + 36 * $r + 6 * $g + $b))
    color_code=$(printf "%03d" $color_code)
    echo $color_code
}

function num-from-string {
    local out i a

    out=1
    for ((i=0;i<${#1};++i)); do
        printf -v a "%d\n" "'${1:i:1}"
        out+=$((a%10))
    done
    echo $(($out % 1000000))
}

function ps_login {
    _HOSTNAME=${PS_HOSTNAME:-$HOSTNAME}
    _HOSTNAME=${_HOSTNAME/.lan/}
    _HOSTNAME=${_HOSTNAME/.compute.internal/.aws}

    user_color=$(rand_color 3 3 $USER)
    host_color=$(rand_color 3 3 $_HOSTNAME)

    bgcolor=017

    if [ "$USER" == "root" ]; then
        user_color="196"
    fi

    echo -ne '\[\e[48;5;'$bgcolor'm\e[38;5;'$user_color'm\] '$USER'\[\e[38;5;248m\]@\[\e[38;5;'$host_color'm\]'$_HOSTNAME' \[\e[38;5;'$bgcolor'm\]'
}

function ps_path {
    bgcolor=026
    fgcolor=255
    local_path=${PWD/#$HOME/\~}

    echo -ne '\[\e[48;5;'$bgcolor'm\]'$PS_TRIANGLE'\[\e[38;5;'$fgcolor'm\] '$local_path' \[\e[38;5;'$bgcolor'm\]'
}

function ps_git {
    local branch prefix color

    git_info=$(git_branch)
    if [ "$git_info" == "" ] ; then
        return
    fi

    git_info=( $git_info )
    prefix=${git_info[0]}
    branch=${git_info[1]}

    modified=${git_info[2]}
    staged=${git_info[3]}
    untracked=${git_info[4]}
    conflict=${git_info[5]}

    branch_symbol='⎇'

    fgcolor=231

    if [ "$prefix" == "b" ] ; then
        if [ "$branch" == "master" ] || [ "$branch" == "main" ] ; then
            bgcolor=028
        elif [ "$branch" == "develop" ] ; then
            bgcolor=100
        else
            bgcolor=$(rand_color 0 3 $branch)
        fi
    else
        bgcolor=136
        branch_symbol='➦'
    fi

    echo -ne '\[\e[48;5;'$bgcolor'm\]'$PS_TRIANGLE'\[\e[38;5;'$fgcolor'm\] '$branch_symbol' '$branch' '

    # print status
    loop_var=(
        M $modified  160
        S $staged    172
        U $untracked 026
        C $conflict  163
    )

    for ((i=0; i<${#loop_var[@]}; i+=3)); do
        cnt=${loop_var[i+1]}
        if [ "$cnt" == "0" ] ; then
            continue
        fi

        if [ "$cnt" == "1" ] ; then
            cnt=""
        fi

        flag=${loop_var[i]}
        bgcolor=${loop_var[i+2]}

        echo -ne '\[\e[48;5;'$bgcolor'm\]' $flag$cnt' '
    done

    echo -ne '\[\e[0;38;5;'$bgcolor'm\]'
}


export CQD_TIMER_EXP=''
export CQD_TIMER_DESC=''

function ps_time {
    fgcolor=253
    bgcolor=237

    # time_ary[0] => HH:MM:SS
    # time_ary[1] => unix timestamp
    time_ary=($(date +'%H:%M:%S %s'))
    timer_txt=''

    if [ ! "$CQD_TIMER_EXP" == "" ] ; then
        if [ "${time_ary[1]}" -gt "$CQD_TIMER_EXP" ]; then
            bgcolor=124
            timer_txt=" ⏰$CQD_TIMER_DESC"
        else
            time_used=$(($CQD_TIMER_EXP - ${time_ary[1]}))
            hh=$(($time_used / 3600))
            mm=$((($time_used % 3600) / 60))
            ss=$(($time_used % 60))
            if [ "$hh" == "0" ]; then
                hms=$(printf "%02d:%02d" "$mm" "$ss")
            else
                hms=$(printf "%02d:%02d:%02d" "$hh" "$mm" "$ss")
            fi
            timer_txt=" ⏰$hms"
        fi
    fi

    echo -ne '\[\e[48;5;'$bgcolor'm\e[38;5;'$fgcolor'm\] '${time_ary[0]}${timer_txt}' \[\e[38;5;'$bgcolor'm\]'
}

function timer() {
    now=$(date +%s)

    # 沒有參數，印出目前的 timer
    # 有參數，則設定 timer 並寫入 CQD_TIMER，時間到時會在 ps_time 中警示
    if [ "" == "$1" ] ; then
        if [ "" == "$CQD_TIMER_EXP" ]; then
            echo "目前沒有設定倒數計時，請用 'timer <秒數> [說明]' 來設定，用 'timer clear' 來清除"
            return
        fi

        echo "目前設定的倒數計時: $CQD_TIMER_DESC (剩 $(($CQD_TIMER_EXP - $now)) 秒)"
        return
    fi

    if [ "$1" == "clear" ] || [ "$1" == "c" ]  ; then
        CQD_TIMER_DESC=''
        CQD_TIMER_EXP=''
        echo "清除倒數計時"
        return
    fi

    ttl=$1
    shift

    export CQD_TIMER_DESC=${@:-"倒數計時 $ttl 秒"}
    export CQD_TIMER_EXP=$(( now + $ttl ))

    echo "設定倒數計時: $CQD_TIMER_DESC (剩 $ttl 秒)"
}

function ps_venv() {
    if [ "" == "$VIRTUAL_ENV" ] ; then
        return
    fi

    # replace '/venv' with ''
    parent_name=${VIRTUAL_ENV/\/venv/}
    venv_name=$(basename $parent_name)

    fgcolor=226
    bgcolor=094

    echo -ne "\[\e[48;5;${bgcolor}m\]${PS_TRIANGLE}\[\e[38;5;${fgcolor}m\] 🐍$venv_name \[\e[38;5;${bgcolor}m\]"
}

function ps_marker() {
    _STATUS=$1

    _PS_STATUS=''

    fgcolor=000
    bgcolor=255

    if [ $_STATUS -ne 0 ] ; then
        fgcolor=255
        bgcolor=196
        _PS_STATUS=' '$_STATUS' '
        if [ ! "${EXIT_CODES_DESC[$_STATUS]}" == "" ] ; then
            _PS_STATUS=' '$_STATUS'('${EXIT_CODES_DESC[$_STATUS]}') '
        fi
    fi

    echo -ne '\[\e[48;5;'$bgcolor'm\]'$PS_TRIANGLE'\[\e[38;5;'$fgcolor'm\] '$_PS_STATUS'$ \[\e[38;5;'$bgcolor'm\]'
}
function ps_run() {
    prev_status_code=$?  # store status for later use, as it will be cleared by next command

    _LINE_END='\[\e[40m\]'$PS_TRIANGLE'\[\e[0;30m\]'

    # start_time=$EPOCHREALTIME
    echo -ne "\n"
    ps_login; ps_path; ps_git; echo -ne "$_LINE_END\n"
    ps_time; ps_venv; ps_marker "$prev_status_code"; echo -ne "$_LINE_END \[\e[0m\]"
    # end_time=$EPOCHREALTIME
    # echo -ne $(scale=3 echo "$end_time - $start_time" | bc)" "
}

PROMPT_COMMAND='PS1=$(ps_run)'

###############################
# Run scripts
###############################

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# 確保 cd 自動完成時最後會補上「/」
complete -d -f -o dirnames cd

# include machine depending settings that not to be included in dotfile repo
if [ -f ~/.bashrc_local ] ; then
    source ~/.bashrc_local
fi

# ssh-agent manangement
if [ "" == "$SSH_AUTH_SOCK" ]; then
    if ! type -p ssh-agent; then
        echo "Can not init ssh-agent, command not available!"
    else
        echo "Initing ssh-agent"
        eval $(ssh-agent)
    fi
fi

###############################
# alias
###############################

#sets up proper alias commands when called
if [ "$(uname)" = "Linux" ]; then
    # set up color for linux
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias ls='ls --color=auto -vG'
elif [ "$(uname)" = "Darwin" ]; then
    alias ls='ls -vG'
else
    alias ls='ls -G'
fi

alias ll='ls -l'
alias la='ls -a'
alias lla='ls -al'

# tmux alias
alias ta='tmux attach'

# Docker alias
dp() {
    nice -n 19 docker compose $@
}

dps() {
    dp exec "$1" /bin/bash || dp exec "$1" /bin/sh
}

dpe() {
    dp exec $@
}

# kubectl 好長
alias k8s=kubectl
kcx() {
    if [ -z "$@" ]; then
        kubectl config get-contexts;
    else
        kubectl config use-context $@
    fi
}

# python alias

_resolve_python() {
    if type python3 &> /dev/null ; then
        echo python3
    else
        echo python
    fi
}

venv() {
    py=$(_resolve_python)
    $py -m venv $@
}

av() {
    if [ "" != "$VIRTUAL_ENV" ] ; then
        echo "已啟動 virtual env"
        return
    fi
    current_folder=${PWD##*/}
    current_folder=${current_folder:-root}

    base=${1:-venv}
    name=${2:-$current_folder}

    if [ "" == "$1" ] && [ ! -d "$base" ] && [ -d ".venv" ] ; then
        base=".venv"
    fi

    if [ ! -f $base/bin/activate ]; then
        py=$(_resolve_python)
        echo "把 virtual env 建立到 $base"
        type $py
        echo "python 版本: "$($py --version)
        venv --prompt $name $base
    fi
    . $base/bin/activate
}

dv() {
    if [ "" == "$VIRTUAL_ENV" ] ; then
        echo "沒有啟動中的 virtual env"
        return
    fi
    deactivate
}

# Hack for tmux agent forwarding
fixssh() {
    eval $(tmux show-env -s |grep '^SSH_')
    echo SSH_* envs re-evaluated.
}
if  [ "$TMUX" ]; then
    fixssh
fi

# misc
man () {
    case "$(type -t -- "$1")" in
    builtin|keyword)
        help "$1"
        ;;
    *)
        command man "$@"
        ;;
    esac
}

cdp() {
    TTT=$(pwd)
    while ! [ -d .git ]; do
        cd ..
    done
    if ! [ "" == "$1" ]; then
        cd $1
    fi
    OLDPWD=$TTT
}
